LS0tIENyZWF0ZSBTUUwgZXhlY3V0aW9uIGZ1bmN0aW9uIGZvciBNQ1Agc2VydmVyCkNSRUFURSBPUiBSRVBMQUNFIEZVTkNUSU9OIGV4ZWN1dGVfc3FsKHNxbCBURVhUKQpSRVRVUk5TIEpTT04KTEFOR1VBR0UgcGxwZ3NxbApTRUNVUklUWSBERUZJTkVSCkFTICQkCkRFQ0xBUkUKICAgIHJlc3VsdCBKU09OOwpiRUdJTgogICAgLS0gRXhlY3V0ZSB0aGUgU1FMIGFuZCByZXR1cm4gYXMgSlNPTgogICAgRVhFQ1VURSAnU0VMRUNUIGpzb25fYWdnKHJvd190b19qc29uKHQpKSBGUk9NICgnIHx8IHNxbCB8fCAnKSB0JyBJTlRPIHJlc3VsdDsKICAgIFJFVFVSTiBDT0FMRVNDRShyZXN1bHQsICdbXSc6Ompzb24pOwpFWENFUFRJT04KICAgIFdIRU4gT1RIRVJTIFRIRU4KICAgICAgICBSRVRVUk4ganNvbl9idWlsZF9vYmplY3QoJ2Vycm9yJywgU1FMRVJSTSk7CkVORDsKJCQ7CgotLSBDcmVhdGUgcmVwb3J0cyB0YWJsZQpDUkVBVEUgVEFCTEUgSUYgTk9UIEVYSVNUUyByZXBvcnRzICgKICAgIGlkIFNFUklBTCBQUklNQVJZIEtFWSwKICAgIHRpdGxlIFRFWFQgTk9UIE5VTEwsCiAgICBjb250ZW50IFRFWFQsCiAgICBjcmVhdGVkX2F0IFRJTUVTVEFNUCBXSVRIIFRJTUUgWk9ORSBERUZBVUxUIE5PVygpLAogICAgdXBkYXRlZF9hdCBUSU1FU1RBTVAgV0lUSCBUSU1FIFpPTkUgREVGQVVMVCBOT1coKQopOwoKLS0gQ3JlYXRlIHVzZXJzIHRhYmxlCkNSRUFURSBUQUJMRSBJRiBOT1QgRVhJU1RTIHVzZXJzICgKICAgIGlkIFNFUklBTCBQUklNQVJZIEtFWSwKICAgIGVtYWlsIFRFWFQgVU5JUVVFIOTUJCBOVUxMLAogICAgbmFtZSBURVhULAogICAgcm9sZSBURVhUIERFRkFVTFQgJ3VzZXInLAogICAgY3JlYXRlZF9hdCBUSU1FU1RBTVAgV0lUSCBUSU1FIFpPTkUgREVGQVVMVCBOT1coKSwKICAgIHVwZGF0ZWRfYXQgVElNRVNUQU1QIFdJVEggVElNRSBaT05FIERFRkFVTFQgTk9XKCkKKTsKCi0tIENyZWF0ZSBkYXRhX3NvdXJjZXMgdGFibGUKQ1JFQVRFIFRBQkxFIElGIE5PVCBFWElTVFMgZGF0YV9zb3VyY2VzICgKICAgIGlkIFNFUklBTCBQUklNQVJZIEtFWSwKICAgIG5hbWUgVEVYVCBOT1QgTlVMTCwKICAgIHR5cGUgVEVYVCBOT1QgTlVMTCwgLS0gJ2RhdGFiYXNlJywgJ2FwaScsICdmaWxlJywgJ3dlYicKICAgIGNvbm5lY3Rpb25fY29uZmlnIEpTT05CLAogICAgY3JlYXRlZF9hdCBUSU1FU1RBTVAgV0lUSCBUSU1FIFpPTkUgREVGQVVMVCBOT1coKSwKICAgIHVwZGF0ZWRfYXQgVElNRVNUQU1QIFdJVEggVElNRSBaT05FIERFRkFVTFQgTk9XKCkKKTsKCi0tIENyZWF0ZSByZXBvcnRfdGVtcGxhdGVzIHRhYmxlCkNSRUFURSBUQUJMRSBJRiBOT1QgRVhJU1RTIHJlcG9ydF90ZW1wbGF0ZXMgKAogICAgaWQgU0VSSUFMIFBSSU1BUlkgS0VZLAogICAgbmFtZSBURVhUIE5PVCBOVUxMLAogICAgZGVzY3JpcHRpb24gVEVYVCwKICAgIHRlbXBsYXRlX2NvbmZpZyBKU09OQk5PVCBOVUxMLAogICAgY3JlYXRlZF9hdCBUSU1FU1RBTVAgV0lUSCBUSU1FIFpPTkUgREVGQVVMVCBOT1coKSwKICAgIHVwZGF0ZWRfYXQgVElNRVNUQU1QIFdJVEggVElNRSBaT05FIERFRkFVTFQgTk9XKCkKKTsKCi0tIENyZWF0ZSBzY2hlZHVsZWRfcmVwb3J0cyB0YWJsZQpDUkVBVEUgVEFCTEUgSUYgTk9UIEVYSVNUUyBzY2hlZHVsZWRfcmVwb3J0cyAoCiAgICBpZCBTRVJJQUwgUFJJTUFSWSBLRVksCiAgICByZXBvcnRfaWQgSU5URUdFUiBSRUZFUkVOQ0VTIHJlcG9ydHMoaWQpLAogICAgc2NoZWR1bGVfY3JvbiBURVhUIE5PVCBOVUxMLAogICAgaXNfYWN0aXZlIEJPT0xFQU4gREVGQVVMVCB0cnVlLAogICAgbGFzdF9ydW4gVElNRVNUQU1QIFdJVEggVElNRSBaT05FLAogICAgbmV4dF9ydW4gVElNRVNUQU1QIFdJVEggVElNRSBaT05FLAogICAgY3JlYXRlZF9hdCBUSU1FU1RBTVAgV0lUSCBUSU1FIFpPTkUgREVGQVVMVCBOT1coKSwKICAgIHVwZGF0ZWRfYXQgVElNRVNUQU1QIFdJVEggVElNRSBaT05FIERFRkFVTFQgTk9XKCkKKTsKCi0tIEluc2VydCBzYW1wbGUgZGF0YQpJTlNFUlQgSU5UTyB1c2VycyAoZW1haWwsIG5hbWUsIHJvbGUpIFZBTFVFUyAKKCdhZG1pbkBleGFtcGxlLmNvbScsICdBZG1pbiBVc2VyJywgJ2FkbWluJyksCigndXNlckBleGFtcGxlLmNvbScsICdSZWd1bGFyIFVzZXInLCAndXNlcicpCk9OIENPTkZMSUNUIChlbWFpbCkgRE8gTk9UIE5PVEhJTkc7CgpJTlNFUlQgSU5UTyBkYXRhX3NvdXJjZXMgKG5hbWUsIHR5cGUsIGNvbm5lY3Rpb25fY29uZmlnKSBWQUxVRVMgCignTWFpbiBEYXRhYmFzZScsICdkYXRhYmFzZScsICd7Imhvc3QiOiAibG9jYWxob3N0IiwgInBvcnQiOiA1NDMyfScpLAooJ0FQSSBFbmRwb2ludCcsICdhcGknLCAneyJ1cmwiOiAiaHR0cHM6Ly9hcGkuZXhhbXBsZS5jb20iLCAiYXV0aCI6ICJiZWFyZXIifScpLAooJ0NTViBGaWxlJywgJ2ZpbGUnLCAneyJwYXRoIjogIi9kYXRhL2ZpbGUuY3N2IiwgImZvcm1hdCI6ICJjc3YifScpCk9OIENPTkZMSUNUIERPIE5PVCBOT1RISU5HOwoKSU5TRVJUIElOVE8gcmVwb3J0X3RlbXBsYXRlcyAobmFtZSwgZGVzY3JpcHRpb24sIHRlbXBsYXRlX2NvbmZpZykpIFZBTFVFUyAKKCdCYXNpYyBSZXBvcnQnLCAnQSBzaW1wbGUgcmVwb3J0IHRlbXBsYXRlJywgJ3sic2VjdGlvbnMiOiBbImhlYWRlciIsICJkYXRhIiwgImZvb3RlciJdfScpLAooJ0Rhc2hib2FyZCcsICdBIGRhc2hib2FyZCB0ZW1wbGF0ZScsICd7IndpZGdldHMiOiBbImNoYXJ0IiwgInRhYmxlIiwgIm1ldHJpYyJdfScpLAooJ0V4cG9ydCcsICdFeHBvcnQgdGVtcGxhdGUnLCAneyJmb3JtYXQiOiAicGRmIiwgIm9yaWVudGF0aW9uIjogImxhbmRzY2FwZSJ9JykKT04gQ09ORkxJQ1QgRE8gTk9UIE5PVEhJTkc7CgotLSBDcmVhdGUgdXBkYXRlZF9hdCB0cmlnZ2VyIGZ1bmN0aW9uCkNSRUFURSBPUiBSRVBMQUNFIEZVTkNUSU9OIHVwZGF0ZV91cGRhdGVkX2F0X2NvbHVtbigpClJFVFRVUk5TIFRSSUdHRVIgQVMgJCQKYkVHSU4KICAgIE5FVy51cGRhdGVkX2F0ID0gTk9XKCk7CiAgICBSRVRVUk4gTkVXOwplbmQ7CiQkIGxhbmd1YWdlICdwbHBnc3FsJzsKCi0tIENyZWF0ZSB0cmlnZ2VycyBmb3IgdXBkYXRlZF9hdApDUkVBVEUgVFJJR0dFUiB1cGRhdGVfcmVwb3J0c191cGRhdGVkX2F0IEJFRk9SRSBVUERBVEUgT04gcmVwb3J0cyBGT1IgRUFDSCBSV08gRVhFQ1VURSfGVU5DVElPTiB1cGRhdGVfdXBkYXRlZF9hdF9jb2x1bW4oKTsKQ1JFQVRFIFRSSUdHRVIgdXBkYXRlX3VzZXJzX3VwZGF0ZWRfYXQgQkVGT1JFIFVQREFURSBPbiB1c2VycyBGT1IgRUFDSiBSV08gRVhFQ1VURSfGVU5DVElPTiB1cGRhdGVfdXBkYXRlZF9hdF9jb2x1bW4oKTsKQ1JFQVRFIFRSSUdEdVJSIHVwZGF0ZV9kYXRhX3NvdXJjZXNfdXBkYXRlZF9hdCBCRUZPUkUgVVBEQVRFIE9OIGRhdGFfc291cmNlcyBGT1IgRUFDSiBSV08gRVhFQ1VURSfGVU5DVElPTiB1cGRhdGVfdXBkYXRlZF9hdF9jb2x1bW4oKTsKQ1JFQVRFIFRSSUdHRVIgdXBkYXRlX3JlcG9ydF90ZW1wbGF0ZXNfdXBkYXRlZF9hdCBCRUZPUkUgVVBEQVRFIE9OIHJlcG9ydF90ZW1wbGF0ZXMgRk9SIEVBQ0ggUk9XIEVYRUNVVEUnRlVOQ1RJT04gdXBkYXRlX3VwZGF0ZWRfYXRfY29sdW1uKCk7CkNSRUFURSBUUklHR0VSIHVwZGF0ZV9zY2hlZHVsZWRfcmVwb3J0c191cGRhdGVkX2F0IEJFRk9SRSBVUERBVEUgT04gc2NoZWR1bGVkX3JlcG9ydHMgRk9SIEVBQ0ggUk9XIEVYRUNVVEUnRlVOQ1RJT04gdXBkYXRlX3VwZGF0ZWRfYXRfY29sdW1uKCk7