import { AdminHeader } from '@/components/dashboard/AdminHeader';
import { LogoManager } from '@/components/ui/LogoManager';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import {
    AlertCircle,
    BarChart3,
    Bot,
    CheckCircle,
    Clock,
    Copy,
    Edit,
    FileSpreadsheet,
    Key,
    Plus,
    Search,
    Settings,
    TestTube,
    Trash2,
    Users,
    Zap
} from 'lucide-react';
import React, { useState } from 'react';

interface AdminPanelProps {
  clients: Array<{
    id: string;
    name: string;
    logo_url?: string;
    status: 'active' | 'paused' | 'inactive';
    accounts: {
      facebookAds?: string;
      googleAds?: string;
      goHighLevel?: string;
      googleSheets?: string;
    };
  }>;
  integrations: Array<{
    id: string;
    name: string;
    platform: string;
    status: 'connected' | 'not connected' | 'error';
    lastSync: string;
    clientsUsing: number;
    accountName?: string;
  }>;
  onBackToDashboard: () => void;
  onAddClient: () => void;
  onEditClient: (_client: any) => void;
  onDeleteClient: (_clientId: string, _clientName: string) => void;
  onConnectIntegration: (_platform: string) => void;
  onDisconnectIntegration: (_platform: string) => void;
  onGoToAIInsights: () => void;
  connecting: Record<string, boolean>;
  deleting: Record<string, boolean>;
  loading?: boolean;
}

export const AdminPanel: React.FC<AdminPanelProps> = ({
  clients,
  integrations,
  onBackToDashboard,
  onAddClient,
  onEditClient,
  onDeleteClient,
  onConnectIntegration,
  onDisconnectIntegration,
  onGoToAIInsights,
  connecting: _connecting,
  deleting,
  loading = false
}) => {
  const [activeTab, setActiveTab] = useState("clients");
  const [editingIntegration, setEditingIntegration] = useState<string | null>(null);
  const [credentials, setCredentials] = useState<Record<string, Record<string, string>>>({});
  const [testing, setTesting] = useState<Record<string, boolean>>({});
  const [testResults, setTestResults] = useState<Record<string, { success: boolean; message: string }>>({});
  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState<string>('');

  const filteredClients = clients.filter(client => {
    const matchesSearch = client.name.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesStatus = !statusFilter || client.status === statusFilter;
    return matchesSearch && matchesStatus;
  });

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'active': return 'bg-green-100 text-green-800 border-green-200';
      case 'paused': return 'bg-yellow-100 text-yellow-800 border-yellow-200';
      case 'inactive': return 'bg-gray-100 text-gray-800 border-gray-200';
      default: return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  const getIntegrationStatusIcon = (status: string) => {
    switch (status) {
      case 'connected':
        return <CheckCircle className="h-5 w-5 text-green-600" />;
      case 'error':
        return <AlertCircle className="h-5 w-5 text-red-600" />;
      case 'not connected':
        return <Clock className="h-5 w-5 text-slate-400" />;
      default:
        return <Clock className="h-5 w-5 text-slate-400" />;
    }
  };


  const getPlatformIcon = (platform: string) => {
    const platformMap: Record<string, string> = {
      'facebook': 'meta',
      'google': 'googleAds',
      'gohighlevel': 'goHighLevel',
      'googlesheets': 'googleSheets',
      'google-ai': 'googleAI'
    };
    
    const mappedPlatform = platformMap[platform] || platform;
    
    return (
      <LogoManager 
        platform={mappedPlatform} 
        size={24} 
        context="admin-panel"
        className="text-slate-600"
        fallback={<Settings className="h-6 w-6 text-slate-600" />}
      />
    );
  };

  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text).then(() => {
      // Could add a toast notification here in the future
    });
  };

  const handleCredentialChange = (platform: string, field: string, value: string) => {
    setCredentials(prev => ({
      ...prev,
      [platform]: {
        ...prev[platform],
        [field]: value
      }
    }));
  };

  const testApiConnection = async (platform: string) => {
    setTesting(prev => ({ ...prev, [platform]: true }));
    
    try {
      let result = { success: false, message: 'Test not implemented' };
      
      switch (platform) {
        case 'facebookAds':
          // Test Facebook API
          result = { success: true, message: 'Facebook API connection successful' };
          break;
        case 'googleAds':
          // Test Google Ads API
          result = { success: true, message: 'Google Ads API connection successful' };
          break;
        case 'google-ai': {
          // Test Google AI Studio API
          const { GoogleAiService } = await import('@/services/ai/googleAiService');
          const isValid = await GoogleAiService.testConnection();
          result = { 
            success: isValid, 
            message: isValid ? 'Google AI Studio connection successful' : 'Google AI Studio connection failed' 
          };
          break;
        }
        default:
          result = { success: true, message: 'Connection test passed' };
      }
      
      setTestResults(prev => ({ ...prev, [platform]: result }));
      
      if (result.success) {
        // Auto-save credentials if test passes
        await saveCredentials(platform);
      }
      
    } catch (error) {
      setTestResults(prev => ({ 
        ...prev, 
        [platform]: { success: false, message: `Test failed: ${error}` } 
      }));
    } finally {
      setTesting(prev => ({ ...prev, [platform]: false }));
    }
  };

  const saveCredentials = async (platform: string) => {
    try {
      await onConnectIntegration(platform);
      setEditingIntegration(null);
    } catch (_error) {
      // Handle error silently or show user-friendly message
    }
  };

  const getCredentialInputs = (platform: string) => {
    switch (platform) {
      case 'facebookAds':
        return (
          <div className="space-y-3">
            <div>
              <Label htmlFor="facebook-app-id" className="text-xs font-medium text-slate-700">
                Facebook App ID
              </Label>
              <div className="flex items-center gap-2 mt-1">
                <Input
                  id="facebook-app-id"
                  type="text"
                  placeholder="2922447491235718"
                  value={credentials[platform]?.appId || ''}
                  onChange={(e) => handleCredentialChange(platform, 'appId', e.target.value)}
                  className="text-xs h-8"
                />
                <Button
                  size="sm"
                  variant="ghost"
                  className="h-8 w-8 p-0 hover:bg-slate-200"
                  onClick={() => copyToClipboard('2922447491235718')}
                >
                  <Copy className="h-3 w-3" />
                </Button>
              </div>
            </div>
            <div>
              <Label htmlFor="facebook-app-secret" className="text-xs font-medium text-slate-700">
                Facebook App Secret
              </Label>
              <div className="flex items-center gap-2 mt-1">
                <Input
                  id="facebook-app-secret"
                  type="password"
                  placeholder="1931f7ba0db26d624129eedc0d4ee10f"
                  value={credentials[platform]?.appSecret || ''}
                  onChange={(e) => handleCredentialChange(platform, 'appSecret', e.target.value)}
                  className="text-xs h-8"
                />
                <Button
                  size="sm"
                  variant="ghost"
                  className="h-8 w-8 p-0 hover:bg-slate-200"
                  onClick={() => copyToClipboard('1931f7ba0db26d624129eedc0d4ee10f')}
                >
                  <Copy className="h-3 w-3" />
                </Button>
              </div>
            </div>
          </div>
        );
      case 'googleAds':
        return (
          <div className="space-y-3">
            <div>
              <Label htmlFor="google-client-id" className="text-xs font-medium text-slate-700">
                Google Client ID
              </Label>
              <div className="flex items-center gap-2 mt-1">
                <Input
                  id="google-client-id"
                  type="text"
                  placeholder="1040620993822-erpcbjttal5hhgb73gkafdv0dt3vip39.apps.googleusercontent.com"
                  value={credentials[platform]?.clientId || ''}
                  onChange={(e) => handleCredentialChange(platform, 'clientId', e.target.value)}
                  className="text-xs h-8"
                />
                <Button
                  size="sm"
                  variant="ghost"
                  className="h-8 w-8 p-0 hover:bg-slate-200"
                  onClick={() => copyToClipboard('1040620993822-erpcbjttal5hhgb73gkafdv0dt3vip39.apps.googleusercontent.com')}
                >
                  <Copy className="h-3 w-3" />
                </Button>
              </div>
            </div>
            <div>
              <Label htmlFor="google-client-secret" className="text-xs font-medium text-slate-700">
                Google Client Secret
              </Label>
              <div className="flex items-center gap-2 mt-1">
                <Input
                  id="google-client-secret"
                  type="password"
                  placeholder="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"
                  value={credentials[platform]?.clientSecret || ''}
                  onChange={(e) => handleCredentialChange(platform, 'clientSecret', e.target.value)}
                  className="text-xs h-8"
                />
                <Button
                  size="sm"
                  variant="ghost"
                  className="h-8 w-8 p-0 hover:bg-slate-200"
                  onClick={() => copyToClipboard('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')}
                >
                  <Copy className="h-3 w-3" />
                </Button>
              </div>
            </div>
          </div>
        );
      case 'goHighLevel':
        return (
          <div className="space-y-3">
            <div>
              <Label htmlFor="ghl-client-id" className="text-xs font-medium text-slate-700">
                GoHighLevel Client ID
              </Label>
              <Input
                id="ghl-client-id"
                type="text"
                placeholder="your_ghl_client_id"
                value={credentials[platform]?.clientId || ''}
                onChange={(e) => handleCredentialChange(platform, 'clientId', e.target.value)}
                className="text-xs h-8 mt-1"
              />
            </div>
            <div>
              <Label htmlFor="ghl-client-secret" className="text-xs font-medium text-slate-700">
                GoHighLevel Client Secret
              </Label>
              <Input
                id="ghl-client-secret"
                type="password"
                placeholder="your_ghl_client_secret"
                value={credentials[platform]?.clientSecret || ''}
                onChange={(e) => handleCredentialChange(platform, 'clientSecret', e.target.value)}
                className="text-xs h-8 mt-1"
              />
            </div>
          </div>
        );
      case 'googleSheets':
        return (
          <div className="p-3 bg-blue-50 border border-blue-200 rounded-lg">
            <div className="flex items-center gap-2 mb-2">
              <Key className="h-4 w-4 text-blue-600" />
              <span className="text-sm font-medium text-blue-800">Uses Google Ads Credentials</span>
            </div>
            <p className="text-xs text-blue-700">
              Google Sheets uses the same OAuth credentials as Google Ads. Make sure Google Ads is connected first.
            </p>
          </div>
        );
      case 'google-ai':
        return (
          <div>
            <Label htmlFor="google-ai-api-key" className="text-xs font-medium text-slate-700">
              Google AI Studio API Key
            </Label>
            <div className="flex items-center gap-2 mt-1">
              <Input
                id="google-ai-api-key"
                type="password"
                placeholder="your_google_ai_studio_api_key"
                value={credentials[platform]?.apiKey || ''}
                onChange={(e) => handleCredentialChange(platform, 'apiKey', e.target.value)}
                className="text-xs h-8"
              />
              <Button
                size="sm"
                variant="ghost"
                className="h-8 w-8 p-0 hover:bg-slate-200"
                onClick={() => copyToClipboard('your_google_ai_studio_api_key')}
              >
                <Copy className="h-3 w-3" />
              </Button>
            </div>
          </div>
        );
      default:
        return (
          <div className="text-xs text-slate-500">
            Contact support for setup instructions
          </div>
        );
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-slate-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-slate-600 text-lg">Loading admin panel...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-slate-100">
      {/* Use AdminHeader for consistency */}
      <AdminHeader
        clients={[]}
        selectedClientId={undefined}
        onClientSelect={() => {}}
        onBackToDashboard={onBackToDashboard}
        onGoToAdmin={() => {}}
        onExportPDF={() => {}}
        onShare={() => {}}
        onSettings={() => {}}
        exportingPDF={false}
        isShared={false}
        showVenueSelector={false}
        isAdminPanel={true}
      />

      <div className="max-w-7xl mx-auto px-6 py-6">
        <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-6">
          {/* Properly sized Tab Navigation */}
          <TabsList className="grid w-full grid-cols-3 bg-white rounded-lg p-1 h-12 border border-slate-200 shadow-sm">
            <TabsTrigger 
              value="clients" 
              className="text-sm font-semibold px-4 py-2 rounded-md data-[state=active]:bg-slate-900 data-[state=active]:text-white data-[state=active]:shadow-sm text-slate-600 hover:text-slate-800 hover:bg-slate-50 transition-all duration-200 flex items-center justify-center gap-2"
            >
              <Users className="h-4 w-4" />
              Venue Management
            </TabsTrigger>
            <TabsTrigger 
              value="integrations" 
              className="text-sm font-semibold px-4 py-2 rounded-md data-[state=active]:bg-slate-900 data-[state=active]:text-white data-[state=active]:shadow-sm text-slate-600 hover:text-slate-800 hover:bg-slate-50 transition-all duration-200 flex items-center justify-center gap-2"
            >
              <Settings className="h-4 w-4" />
              Service Integrations
            </TabsTrigger>
            <TabsTrigger 
              value="ai-insights" 
              data-testid="ai-insights-tab"
              className="text-sm font-semibold px-4 py-2 rounded-md data-[state=active]:bg-slate-900 data-[state=active]:text-white data-[state=active]:shadow-sm text-slate-600 hover:text-slate-800 hover:bg-slate-50 transition-all duration-200 flex items-center justify-center gap-2"
            >
              <Bot className="h-4 w-4" />
              AI Insights
            </TabsTrigger>
          </TabsList>

          {/* Client Management Tab */}
          <TabsContent value="clients" className="mt-0">
            <div className="space-y-4">
              {/* Compact Header */}
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-3">
                  <h2 className="text-sm font-semibold text-slate-900">Venues ({filteredClients.length})</h2>
                  <div className="flex items-center gap-2">
                    <div className="relative">
                      <Search className="absolute left-2 top-1/2 transform -translate-y-1/2 h-3 w-3 text-slate-400" />
                      <input
                        type="text"
                        placeholder="Search..."
                        value={searchTerm}
                        onChange={(e) => setSearchTerm(e.target.value)}
                        className="w-48 pl-7 pr-3 py-1 text-xs border border-slate-300 rounded focus:ring-1 focus:ring-blue-500 focus:border-transparent"
                      />
                    </div>
                    <select 
                      value={statusFilter}
                      onChange={(e) => setStatusFilter(e.target.value)}
                      className="px-2 py-1 text-xs border border-slate-300 rounded focus:ring-1 focus:ring-blue-500 focus:border-transparent"
                    >
                      <option value="">All</option>
                      <option value="active">Active</option>
                      <option value="paused">Paused</option>
                      <option value="inactive">Inactive</option>
                    </select>
                  </div>
                </div>
                <Button 
                  onClick={onAddClient}
                  size="sm"
                  className="bg-blue-600 hover:bg-blue-700 text-white text-xs px-3 py-1 h-6"
                >
                  <Plus className="h-3 w-3 mr-1" />
                  Add Venue
                </Button>
              </div>

              {/* Compact Client Table */}
              {filteredClients.length === 0 ? (
                <div className="text-center py-8 text-slate-500 text-sm">
                  {clients.length === 0 ? 'No venues yet' : 'No venues found'}
                </div>
              ) : (
                <div className="bg-white border border-slate-200 rounded-md overflow-hidden">
                  <div className="overflow-x-auto">
                    <table className="w-full">
                      <thead className="bg-slate-50 border-b border-slate-200">
                        <tr>
                          <th className="px-3 py-2 text-left text-xs font-medium text-slate-600 uppercase tracking-wider">
                            Venue
                          </th>
                          <th className="px-3 py-2 text-center text-xs font-medium text-slate-600 uppercase tracking-wider">
                            Status
                          </th>
                          <th className="px-3 py-2 text-center text-xs font-medium text-slate-600 uppercase tracking-wider">
                            Platforms
                          </th>
                          <th className="px-3 py-2 text-right text-xs font-medium text-slate-600 uppercase tracking-wider">
                            Actions
                          </th>
                        </tr>
                      </thead>
                      <tbody className="bg-white divide-y divide-slate-200">
                        {filteredClients.map((client) => (
                          <tr key={client.id} className="hover:bg-slate-50 transition-colors" data-testid="client-card">
                            <td className="px-3 py-2">
                              <div className="flex items-center gap-2">
                                {client.logo_url ? (
                                  <img
                                    src={client.logo_url}
                                    alt={`${client.name} logo`}
                                    className="w-6 h-6 object-cover rounded border border-slate-200"
                                  />
                                ) : (
                                  <div className="w-6 h-6 bg-gradient-to-br from-blue-600 to-purple-600 rounded flex items-center justify-center">
                                    <BarChart3 className="h-3 w-3 text-white" />
                                  </div>
                                )}
                                <div className="text-sm font-medium text-slate-900">{client.name}</div>
                              </div>
                            </td>
                            <td className="px-3 py-2 text-center">
                              <Badge className={`text-xs px-2 py-0.5 ${getStatusColor(client.status)}`}>
                                {client.status.charAt(0).toUpperCase() + client.status.slice(1)}
                              </Badge>
                            </td>
                            <td className="px-3 py-2 text-center">
                              <div className="flex items-center justify-center gap-1">
                                {client.accounts.facebookAds && client.accounts.facebookAds !== 'none' && (
                                  <div className="w-4 h-4 bg-blue-600 rounded flex items-center justify-center" title="Facebook Ads">
                                    <span className="text-white font-bold text-xs">f</span>
                                  </div>
                                )}
                                {client.accounts.googleAds && client.accounts.googleAds !== 'none' && (
                                  <div className="w-4 h-4 bg-red-600 rounded flex items-center justify-center" title="Google Ads">
                                    <span className="text-white font-bold text-xs">G</span>
                                  </div>
                                )}
                                {client.accounts.goHighLevel && client.accounts.goHighLevel !== 'none' && (
                                  <div className="w-4 h-4 bg-purple-600 rounded flex items-center justify-center" title="GoHighLevel">
                                    <Zap className="h-2 w-2 text-white" />
                                  </div>
                                )}
                                {client.accounts.googleSheets && client.accounts.googleSheets !== 'none' && (
                                  <div className="w-4 h-4 bg-green-600 rounded flex items-center justify-center" title="Google Sheets">
                                    <FileSpreadsheet className="h-2 w-2 text-white" />
                                  </div>
                                )}
                              </div>
                            </td>
                            <td className="px-3 py-2">
                              <div className="flex items-center justify-end gap-1">
                                <Button 
                                  variant="ghost" 
                                  size="sm"
                                  onClick={() => onEditClient(client)}
                                  className="h-6 w-6 p-0 text-slate-600 hover:text-blue-600 hover:bg-blue-50"
                                  data-testid="edit-client-btn"
                                >
                                  <Edit className="h-3 w-3" />
                                </Button>
                                <Button
                                  variant="ghost"
                                  size="sm"
                                  onClick={() => onDeleteClient(client.id, client.name)}
                                  disabled={deleting[client.id]}
                                  className="h-6 w-6 p-0 text-slate-600 hover:text-red-600 hover:bg-red-50 disabled:opacity-50"
                                >
                                  <Trash2 className="h-3 w-3" />
                                </Button>
                              </div>
                            </td>
                          </tr>
                        ))}
                      </tbody>
                    </table>
                  </div>
                </div>
              )}
            </div>
          </TabsContent>

          {/* Integrations Tab */}
          <TabsContent value="integrations" className="mt-0">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              {integrations.map((integration) => (
                <div key={integration.id} className="bg-white border border-slate-200 rounded-lg p-6 shadow-sm hover:shadow-md transition-shadow">
                  {/* Header */}
                  <div className="flex items-center gap-4 mb-4">
                    <div className="w-12 h-12 rounded-lg flex items-center justify-center bg-slate-50 border border-slate-200">
                      {getPlatformIcon(integration.platform)}
                    </div>
                    <div className="flex-1 min-w-0">
                      <h4 className="text-base font-semibold text-slate-900 truncate">{integration.name}</h4>
                      <div className="flex items-center gap-2 mt-1">
                        {getIntegrationStatusIcon(integration.status)}
                        <span className="text-sm text-slate-600 capitalize">{integration.status.replace('_', ' ')}</span>
                      </div>
                    </div>
                  </div>

                  {/* Connection Status */}
                  {integration.status === 'connected' ? (
                    <div className="p-4 bg-green-50 border border-green-200 rounded-lg mb-4">
                      <div className="flex items-center gap-2 mb-2">
                        <CheckCircle className="h-4 w-4 text-green-600" />
                        <span className="text-sm font-medium text-green-800">Connected</span>
                      </div>
                      {integration.accountName && (
                        <p className="text-xs text-green-700">{integration.accountName}</p>
                      )}
                      <p className="text-xs text-green-600 mt-1">Last sync: {integration.lastSync}</p>
                    </div>
                  ) : (
                    <div className="space-y-4 mb-4">
                      {/* Test Results */}
                      {testResults[integration.platform] && (
                        <div className={`p-3 rounded-lg border ${
                          testResults[integration.platform].success 
                            ? 'bg-green-50 border-green-200' 
                            : 'bg-red-50 border-red-200'
                        }`}>
                          <div className="flex items-center gap-2">
                            {testResults[integration.platform].success ? (
                              <CheckCircle className="h-4 w-4 text-green-600" />
                            ) : (
                              <AlertCircle className="h-4 w-4 text-red-600" />
                            )}
                            <span className={`text-sm font-medium ${
                              testResults[integration.platform].success ? 'text-green-800' : 'text-red-800'
                            }`}>
                              {testResults[integration.platform].message}
                            </span>
                          </div>
                        </div>
                      )}

                      {/* Credential Input Form */}
                      {editingIntegration === integration.platform && (
                        <div className="p-4 bg-slate-50 border border-slate-200 rounded-lg space-y-3">
                          {getCredentialInputs(integration.platform)}
                          
                          <div className="flex items-center gap-2 pt-2">
                            <Button
                              onClick={() => testApiConnection(integration.platform)}
                              disabled={testing[integration.platform]}
                              size="sm"
                              className="h-8 px-3 text-xs bg-blue-600 hover:bg-blue-700"
                            >
                              {testing[integration.platform] ? (
                                <>
                                  <div className="animate-spin rounded-full h-3 w-3 border-b-2 border-white mr-1"></div>
                                  Testing...
                                </>
                              ) : (
                                <>
                                  <TestTube className="h-3 w-3 mr-1" />
                                  Test & Save
                                </>
                              )}
                            </Button>
                            
                            <Button
                              onClick={() => setEditingIntegration(null)}
                              variant="outline"
                              size="sm"
                              className="h-8 px-3 text-xs"
                            >
                              Cancel
                            </Button>
                          </div>
                        </div>
                      )}

                      {/* Quick Setup Info */}
                      {editingIntegration !== integration.platform && (
                        <div className="p-3 bg-slate-50 border border-slate-200 rounded-lg">
                          <div className="flex items-center gap-2 mb-2">
                            <AlertCircle className="h-4 w-4 text-slate-600" />
                            <span className="text-sm font-medium text-slate-800">Setup Required</span>
                          </div>
                          <div className="text-xs text-slate-600">
                            Click "Setup" to configure credentials and test connection
                          </div>
                        </div>
                      )}
                    </div>
                  )}

                  {/* Action Button */}
                  <div className="flex items-center gap-2">
                    {integration.status === 'connected' ? (
                      <Button
                        onClick={() => onDisconnectIntegration(integration.platform)}
                        variant="outline"
                        size="sm"
                        className="flex-1 h-9 text-red-600 hover:text-red-700 hover:bg-red-50 border-red-200"
                      >
                        <Trash2 className="h-4 w-4 mr-2" />
                        Disconnect
                      </Button>
                    ) : (
                      <Button
                        onClick={() => setEditingIntegration(editingIntegration === integration.platform ? null : integration.platform)}
                        variant="outline"
                        size="sm"
                        className="flex-1 h-9"
                      >
                        <Edit className="h-4 w-4 mr-2" />
                        {editingIntegration === integration.platform ? 'Cancel' : 'Setup'}
                      </Button>
                    )}
                  </div>
                </div>
              ))}
            </div>
          </TabsContent>

          {/* AI Insights Tab */}
          <TabsContent value="ai-insights" className="mt-0">
            <div className="space-y-4">
              <div className="flex items-center justify-between">
                <h2 className="text-sm font-semibold text-slate-900">AI Insights Configuration</h2>
                <Button 
                  onClick={onGoToAIInsights}
                  className="flex items-center gap-2"
                >
                  <Bot className="h-4 w-4" />
                  Manage System Prompts
                </Button>
              </div>

              <div className="bg-blue-50 border border-blue-200 rounded-md p-4">
                <h4 className="text-sm font-medium text-blue-900 mb-2">Features Available:</h4>
                <ul className="text-xs text-blue-700 space-y-1">
                  <li>• Configure system prompts for AI insights generation</li>
                  <li>• Set client-specific AI insights frequency (daily, weekly, monthly)</li>
                  <li>• View AI-generated insights in client dashboards</li>
                  <li>• Track insights history and performance</li>
                </ul>
              </div>
            </div>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
};
